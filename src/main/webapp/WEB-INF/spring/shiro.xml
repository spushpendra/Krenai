<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:mvc="http://www.springframework.org/schema/mvc"
   xsi:schemaLocation="
   http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

     <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
    <property name="securityManager" ref="securityManager"/>
    <property name="loginUrl" value="/login"/>
    <property name="successUrl" value="/dashboard"/>
	<property name="unauthorizedUrl" value="/protected/UnauthErrorPage"/>
    <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
    <!-- defined will be automatically acquired and available via its beanName in chain        -->
    <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
    <!-- <property name="filters">-->
      <!--  <util:map>-->
         <!--   <entry key="anAlias" value-ref="someFilter"/>-->
      <!--  </util:map>-->
  <!--  </property> -->

    <property name="filterChainDefinitions">
        <value>
	/assets/** = anon
	/=anon
	/application-json/android/** = anon
	/supplier/nearest=anon
	/store=anon
        /** = authc
        </value>
    </property>
</bean>

<!-- Define any javax.servlet.Filter beans you want anywhere in this application context.   -->
<!-- They will automatically be acquired by the 'shiroFilter' bean above and made available -->
<!-- to the 'filterChainDefinitions' property.  Or you can manually/explicitly add them     -->
<!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for more details.       -->

<bean id="builtInCacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"/>
<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
    <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
    <property name="realm" ref="myRealm"/>
    <property name="cacheManager" ref="builtInCacheManager"/>
    <!-- By default the servlet container sessions will be used.  Uncomment this line-->
         <!-- to use shiro's native sessions (see the JavaDoc for more): -->
    <!-- <property name="sessionMode" value="native"/> -->
</bean>
<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

<!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
<!-- security datasource: -->
<bean id="myRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">

 <property name="credentialsMatcher" ref="hashMatcher"/> 
	<property name="authenticationQuery" value="select password,salt from supplier where email_id = ? and status_id='1'"/>
 <property name="userRolesQuery" value="SELECT group_id FROM supplier_login_security_group WHERE supplier_id=?"/>

  <property name="permissionsQuery"
            value="SELECT permission_id FROM supplier_security_group_permission WHERE group_id=?" />
        <property name="permissionsLookupEnabled" value="true"></property>
    <property name="dataSource" ref="krenaiERPDatasource"/>
</bean>

<!-- Hash Matcher Bean responsible for matching credentials of logging user -->
<bean id="hashMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
<!-- 		Algorithm name -->
    <property name="hashAlgorithmName" value="SHA-512"/> 
<!-- 		No. of Hash Iterations. Note: must match with iterations used to save password in database. -->
    <property name="hashIterations" value="10000"/>  
<!--     	true if Stored Credentials(i.e. password and salt) are in Hexadecimal form. False denotes BASE64 encoding.-->
    <property name="storedCredentialsHexEncoded" value="true"/>
</bean>

<!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
<!-- the lifecycleBeanProcessor has run: -->
<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    <property name="securityManager" ref="securityManager"/>
</bean>
</beans> 
